const { scrapeVideo } = require('../services/util/scraper');
const { botLoader } = require('../services/tik-tok/bot-loader');
const { getChatGPTResponse } = require('../services/util/gpt');
const { isValidUrl, downloadFile } = require('../services/function');
const TelegramBot = require('node-telegram-bot-api');
const { miror } = require('../services/video-act');




/**
 * –°–æ–∑–¥–∞—Ç—å –±–æ—Ç —Å–ª—É—à–∞—Ç–µ–ª–µ–π –∏ –≤–µ—Ä–Ω—É—Ç—å –æ–±—å–∫—Ç –±–æ—Ç–∞
 * @param {string} token 
 * @returns {TelegramBot}
 */
module.exports =(token)=> {
    const bot = new TelegramBot(token, {polling: true});
    console.log('ü§ñ bot create!');

    // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
    bot.on('message', async(msg)=> {
        const chatId = msg.chat.id;
        const text = msg.text;
        const registrator =(txt, error)=> {
            if(error) console.error(error);
            if(txt) {
                if(!error) console.log(txt);
                bot.sendMessage(chatId, txt);
            }
        }

        if(isValidUrl(text)) {
            registrator(`–ü—Ä–∏–Ω—è—Ç–æ –≤ —Ä–∞–±–æ—Ç—É`);
            const resultScrape = await scrapeVideo(text);           // –ø–∏–∑–¥–∏–º

            if(resultScrape !== 'TypeError' && resultScrape.url) {
                const resultDownload = await downloadFile(resultScrape.url);                    // –ó–∞–≥—Ä—É–∑–∫–∞ —Ñ–∞–π–ª–∞ –Ω–∞ –ª–æ–∫–∞–ª–∫—É
                const resultMirror = await miror(CONFIG.textCooper, CONFIG.flickCooper);        // –û–±—Ä–∞–±–æ—Ç–∫–∞
                const responcesGptText = await getChatGPTResponse(CONFIG.textPrompt);
                
                registrator(`üé• –í–∏–¥–µ–æ –∏–∑–≤–ª–µ—á–µ–Ω–æ. –ü–µ—Ä–µ–¥–∞–Ω–æ –±–æ—Ç—É`);
               

                if(typeof responcesGptText==='string' && typeof resultMirror==='string' && !resultDownload) {
                    await botLoader(resultMirror, responcesGptText, registrator);
                }
                else {
                    if(resultDownload.error) {
                        registrator('‚ùå –°–±–æ–π –∑–∞–≥—Ä—É–∑—á–∏–∫–∞ –≤–∏–¥–µ–æ', {
                            label: 'error loader',
                            ...resultDownload.error
                        });
                    }
                    if(resultMirror.error) {
                        registrator('‚ùå –°–±–æ–π —Ä–µ–¥–∞–∫—Ç–∏—Ä–∞ –≤–∏–¥–µ–æ', {
                            label: 'error mirror',
                            ...resultMirror.error
                        });
                    }
                }
            }
            else registrator('‚ùå –°–±–æ–π –ø—Ä–∏ –ø–æ–ø—ã—Ç–∫–µ —Å–∫–∞—á–∞—Ç—å –≤–∏–¥–µ–æ —Å tik-tok', {
                name: 'Error tik-tok scraper',
                resultScrape: resultScrape
            });
        }
        else {
            registrator('‚ùå –ù–µ –≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç —Å—Å—ã–ª–∫–∏');
        }
    });


    bot.onText(/\/start/, (msg) => {
        const chatId = msg.chat.id;
        bot.sendMessage(chatId, '–ñ–¥—É —Å—Å—ã–ª–∫—É!');
    });
    bot.onText(/\/play/, (msg) => {
        bot.sendMessage(msg.chat.id, '–ù–∞–∂–º–∏ "–ò–≥—Ä–∞—Ç—å", —á—Ç–æ–±—ã –∑–∞–ø—É—Å—Ç–∏—Ç—å –∏–≥—Ä—É!', {
            reply_markup: {
                inline_keyboard: [
                    [{ text: 'üéÆ –ò–≥—Ä–∞—Ç—å', web_app: { url: 'https://last-exit.su' } }],
                ],
            },
        });
    });

    return bot;
}